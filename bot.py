#!/usr/bin/env python3
# -*- coding: utf-8 -*-


import os
import random
import json
import re
from datetime import datetime
from typing import List, Dict, Any

import telebot
from telebot import types

BOT_TOKEN = os.environ.get('BOT_TOKEN', '7595500623:AAFMBKBvRi2eA0PRb2QHE1_tB6V_cnx3fHw')
bot = telebot.TeleBot(BOT_TOKEN)

# –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Ñ–∏–ª—å–º–æ–≤ 2023 –≥–æ–¥–∞ —Å —Ä–µ–π—Ç–∏–Ω–≥–∞–º–∏ –∏ –∂–∞–Ω—Ä–∞–º–∏
MOVIES_DB = {
    "action": [
        {"title": "–î–∂–æ–Ω –£–∏–∫ 4", "rating": 8.0, "year": 2023, "director": "–ß–∞–¥ –°—Ç–∞—Ö–µ–ª—Å–∫–∏"},
        {"title": "–°—Ç—Ä–∞–∂–∏ –ì–∞–ª–∞–∫—Ç–∏–∫–∏ 3", "rating": 8.1, "year": 2023, "director": "–î–∂–µ–π–º—Å –ì–∞–Ω–Ω"},
        {"title": "–§–æ—Ä—Å–∞–∂ 10", "rating": 5.8, "year": 2023, "director": "–õ—É–∏ –õ–µ—Ç–µ—Ä—å–µ"},
        {"title": "–ò–Ω–¥–∏–∞–Ω–∞ –î–∂–æ–Ω—Å 5", "rating": 6.7, "year": 2023, "director": "–î–∂–µ–π–º—Å –ú—ç–Ω–≥–æ–ª–¥"},
    ],
    "drama": [
        {"title": "–û–ø–ø–µ–Ω–≥–µ–π–º–µ—Ä", "rating": 8.5, "year": 2023, "director": "–ö—Ä–∏—Å—Ç–æ—Ñ–µ—Ä –ù–æ–ª–∞–Ω"},
        {"title": "–£–±–∏–π—Ü—ã —Ü–≤–µ—Ç–æ—á–Ω–æ–π –ª—É–Ω—ã", "rating": 7.9, "year": 2023, "director": "–ú–∞—Ä—Ç–∏–Ω –°–∫–æ—Ä—Å–µ–∑–µ"},
        {"title": "–ó–æ–Ω–∞ –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤", "rating": 7.8, "year": 2023, "director": "–î–∂–æ–Ω–∞—Ç–∞–Ω –ì–ª–µ–π–∑–µ—Ä"},
    ],
    "comedy": [
        {"title": "–ë–∞—Ä–±–∏", "rating": 7.0, "year": 2023, "director": "–ì—Ä–µ—Ç–∞ –ì–µ—Ä–≤–∏–≥"},
        {"title": "–≠–ª–µ–º–µ–Ω—Ç–∞—Ä–Ω–æ", "rating": 7.8, "year": 2023, "director": "–ü–∏—Ç–µ—Ä –°–æ–Ω"},
        {"title": "–ü–æ–¥–∑–µ–º–µ–ª—å—è –∏ –¥—Ä–∞–∫–æ–Ω—ã", "rating": 7.3, "year": 2023, "director": "–î–∂–æ–Ω–∞—Ç–∞–Ω –ì–æ–ª–¥—à—Ç–µ–π–Ω"},
    ],
    "horror": [
        {"title": "–ö—Ä–∏–∫ 6", "rating": 6.5, "year": 2023, "director": "–ú—ç—Ç—Ç –ë–µ—Ç—Ç–∏–Ω–µ–ª–ª–∏-–û–ª–ø–∏–Ω"},
        {"title": "–ó–ª–æ–≤–µ—â–∏–µ –º–µ—Ä—Ç–≤–µ—Ü—ã: –í–æ–∑—Ä–æ–∂–¥–µ–Ω–∏–µ", "rating": 6.7, "year": 2023, "director": "–õ–∏ –ö—Ä–æ–Ω–∏–Ω"},
        {"title": "–ú–æ–Ω–∞—Ö–∏–Ω—è 2", "rating": 5.6, "year": 2023, "director": "–ú–∞–π–∫–ª –ß–∞–≤–µ—Å"},
    ],
    "sci-fi": [
        {"title": "–î—é–Ω–∞: –ß–∞—Å—Ç—å –≤—Ç–æ—Ä–∞—è", "rating": 8.7, "year": 2023, "director": "–î–µ–Ω–∏ –í–∏–ª—å–Ω—ë–≤"},
        {"title": "–ß–µ–ª–æ–≤–µ–∫-–ø–∞—É–∫: –ü–∞—É—Ç–∏–Ω–∞ –≤—Å–µ–ª–µ–Ω–Ω—ã—Ö", "rating": 8.6, "year": 2023, "director": "–•–æ–∞–∫–∏–Ω –î–æ—Å –°–∞–Ω—Ç–æ—Å"},
    ]
}

# –°–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
user_states = {}

# –¶–∏—Ç–∞—Ç—ã –∏–∑ —Ñ–∏–ª—å–º–æ–≤
MOVIE_QUOTES = [
    "¬´–Ø —Å–¥–µ–ª–∞—é –µ–º—É –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ, –æ—Ç –∫–æ—Ç–æ—Ä–æ–≥–æ –æ–Ω –Ω–µ —Å–º–æ–∂–µ—Ç –æ—Ç–∫–∞–∑–∞—Ç—å—Å—è¬ª ‚Äî –ö—Ä—ë—Å—Ç–Ω—ã–π –æ—Ç–µ—Ü",
    "¬´–î–∞ –ø—Ä–µ–±—É–¥–µ—Ç —Å —Ç–æ–±–æ–π –°–∏–ª–∞¬ª ‚Äî –ó–≤—ë–∑–¥–Ω—ã–µ –≤–æ–π–Ω—ã",
    "¬´–ñ–∏–∑–Ω—å –∫–∞–∫ –∫–æ—Ä–æ–±–∫–∞ —à–æ–∫–æ–ª–∞–¥–Ω—ã—Ö –∫–æ–Ω—Ñ–µ—Ç¬ª ‚Äî –§–æ—Ä—Ä–µ—Å—Ç –ì–∞–º–ø",
    "¬´–•—å—é—Å—Ç–æ–Ω, —É –Ω–∞—Å –ø—Ä–æ–±–ª–µ–º–∞¬ª ‚Äî –ê–ø–æ–ª–ª–æ–Ω 13",
    "¬´–Ø –≤–µ—Ä–Ω—É—Å—å¬ª ‚Äî –¢–µ—Ä–º–∏–Ω–∞—Ç–æ—Ä",
    "¬´–ü–æ—Å–ª–µ –≤—Å–µ–≥–æ, —è –¥—É–º–∞—é, –º—ã –Ω–µ –≤ –ö–∞–Ω–∑–∞—Å–µ¬ª ‚Äî –í–æ–ª—à–µ–±–Ω–∏–∫ —Å—Ç—Ä–∞–Ω—ã –û–∑",
    "¬´–≠–ª–µ–º–µ–Ω—Ç–∞—Ä–Ω–æ, –í–∞—Ç—Å–æ–Ω¬ª ‚Äî –®–µ—Ä–ª–æ–∫ –•–æ–ª–º—Å",
]

# –§–∞–∫—Ç—ã –æ –∫–∏–Ω–æ
MOVIE_FACTS = [
    "üé¨ –°–∞–º—ã–π –¥–ª–∏–Ω–Ω—ã–π —Ñ–∏–ª—å–º –≤ –∏—Å—Ç–æ—Ä–∏–∏ –¥–ª–∏—Ç—Å—è 857 —á–∞—Å–æ–≤ (35 –¥–Ω–µ–π)!",
    "üèÜ '–û–ø–ø–µ–Ω–≥–µ–π–º–µ—Ä' –ø–æ–ª—É—á–∏–ª 7 –û—Å–∫–∞—Ä–æ–≤ –≤ 2024 –≥–æ–¥—É",
    "üí∞ '–ê–≤–∞—Ç–∞—Ä: –ü—É—Ç—å –≤–æ–¥—ã' —Å–æ–±—Ä–∞–ª –±–æ–ª–µ–µ 2.3 –º–∏–ª–ª–∏–∞—Ä–¥–∞ –¥–æ–ª–ª–∞—Ä–æ–≤",
    "üìΩÔ∏è –ü–µ—Ä–≤—ã–π —Ñ–∏–ª—å–º –±—ã–ª —Å–Ω—è—Ç –≤ 1888 –≥–æ–¥—É –∏ –¥–ª–∏–ª—Å—è –≤—Å–µ–≥–æ 2 —Å–µ–∫—É–Ω–¥—ã",
    "üé≠ –¢–æ–º –ö—Ä—É–∑ –≤—ã–ø–æ–ª–Ω—è–µ—Ç –≤—Å–µ —Ç—Ä—é–∫–∏ –≤ '–ú–∏—Å—Å–∏—è –Ω–µ–≤—ã–ø–æ–ª–Ω–∏–º–∞' —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ",
    "ü¶ñ –î–ª—è '–ü–∞—Ä–∫–∞ –Æ—Ä—Å–∫–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞' –∑–≤—É–∫–∏ –¥–∏–Ω–æ–∑–∞–≤—Ä–æ–≤ —Å–æ–∑–¥–∞–≤–∞–ª–∏ –∏–∑ –∫—Ä–∏–∫–æ–≤ –∂–∏–≤–æ—Ç–Ω—ã—Ö",
    "üåç –ë–æ–ª–ª–∏–≤—É–¥ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç –±–æ–ª—å—à–µ —Ñ–∏–ª—å–º–æ–≤ –≤ –≥–æ–¥, —á–µ–º –ì–æ–ª–ª–∏–≤—É–¥",
]


@bot.message_handler(commands=['start'])
def send_welcome(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start - –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞"""
    user_id = message.from_user.id
    user_name = message.from_user.first_name or "–ö–∏–Ω–æ–º–∞–Ω"
    
    # –°–æ–∑–¥–∞–µ–º –∫—Ä–∞—Å–∏–≤–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    welcome_text = f"""
üé¨ *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ FilmsRew Bot, {user_name}!*

–Ø ‚Äî –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –≤ –º–∏—Ä–µ –∫–∏–Ω–æ 2023 –≥–æ–¥–∞!

üéØ *–ß—Ç–æ —è —É–º–µ—é:*

üìå /help - –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
üé≤ /random\_movie - –ü–æ–ª—É—á–∏—Ç—å —Å–ª—É—á–∞–π–Ω—É—é —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é —Ñ–∏–ª—å–º–∞
üîç /find\_movie \[–∂–∞–Ω—Ä\] - –ù–∞–π—Ç–∏ —Ñ–∏–ª—å–º –ø–æ –∂–∞–Ω—Ä—É
‚≠ê /top\_rated - –¢–æ–ø-5 —Ñ–∏–ª—å–º–æ–≤ –ø–æ —Ä–µ–π—Ç–∏–Ω–≥—É
üí¨ /movie\_quote - –°–ª—É—á–∞–π–Ω–∞—è —Ü–∏—Ç–∞—Ç–∞ –∏–∑ —Ñ–∏–ª—å–º–∞
üìö /movie\_fact - –ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —Ñ–∞–∫—Ç –æ –∫–∏–Ω–æ
üéÆ /quiz - –í–∏–∫—Ç–æ—Ä–∏–Ω–∞ –æ —Ñ–∏–ª—å–º–∞—Ö

üí° *–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:*
‚Ä¢ /find\_movie action - –Ω–∞–π—Ç–∏ –±–æ–µ–≤–∏–∫
‚Ä¢ /find\_movie drama - –Ω–∞–π—Ç–∏ –¥—Ä–∞–º—É
‚Ä¢ /random\_movie - —Å–ª—É—á–∞–π–Ω—ã–π —Ñ–∏–ª—å–º

–ì–æ—Ç–æ–≤—ã –ø–æ–≥—Ä—É–∑–∏—Ç—å—Å—è –≤ –º–∏—Ä –∫–∏–Ω–æ? üçø
    """
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –±—ã—Å—Ç—Ä—ã–º–∏ –∫–æ–º–∞–Ω–¥–∞–º–∏
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    btn1 = types.KeyboardButton("üé≤ –°–ª—É—á–∞–π–Ω—ã–π —Ñ–∏–ª—å–º")
    btn2 = types.KeyboardButton("‚≠ê –¢–æ–ø —Ñ–∏–ª—å–º–æ–≤")
    btn3 = types.KeyboardButton("üí¨ –¶–∏—Ç–∞—Ç–∞")
    btn4 = types.KeyboardButton("üìö –§–∞–∫—Ç –æ –∫–∏–Ω–æ")
    markup.add(btn1, btn2, btn3, btn4)
    
    bot.send_message(message.chat.id, welcome_text, parse_mode='Markdown', reply_markup=markup)


@bot.message_handler(commands=['help'])
def send_help(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help - —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥"""
    help_text = """
üìã *–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*

*–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*
üè† /start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
‚ùì /help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ

*–†–∞–±–æ—Ç–∞ —Å —Ñ–∏–ª—å–º–∞–º–∏:*
üé≤ /random\_movie - –°–ª—É—á–∞–π–Ω–∞—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è —Ñ–∏–ª—å–º–∞
üîç /find\_movie \[–∂–∞–Ω—Ä\] - –ù–∞–π—Ç–∏ —Ñ–∏–ª—å–º –ø–æ –∂–∞–Ω—Ä—É
‚≠ê /top\_rated - –¢–æ–ø-5 —Ñ–∏–ª—å–º–æ–≤ 2023 –≥–æ–¥–∞

*–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è:*
üí¨ /movie\_quote - –°–ª—É—á–∞–π–Ω–∞—è —Ü–∏—Ç–∞—Ç–∞ –∏–∑ —Ñ–∏–ª—å–º–∞
üìö /movie\_fact - –ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —Ñ–∞–∫—Ç –æ –∫–∏–Ω–æ
üéÆ /quiz - –ú–∏–Ω–∏-–≤–∏–∫—Ç–æ—Ä–∏–Ω–∞ –æ —Ñ–∏–ª—å–º–∞—Ö

*–î–æ—Å—Ç—É–ø–Ω—ã–µ –∂–∞–Ω—Ä—ã:*
‚Ä¢ action (–±–æ–µ–≤–∏–∫)
‚Ä¢ drama (–¥—Ä–∞–º–∞)
‚Ä¢ comedy (–∫–æ–º–µ–¥–∏—è)
‚Ä¢ horror (—É–∂–∞—Å—ã)
‚Ä¢ sci-fi (—Ñ–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞)

*–ü—Ä–∏–º–µ—Ä—ã:*
/find\_movie comedy - –Ω–∞–π—Ç–∏ –∫–æ–º–µ–¥–∏—é
/find\_movie action - –Ω–∞–π—Ç–∏ –±–æ–µ–≤–∏–∫
    """
    
    bot.send_message(message.chat.id, help_text, parse_mode='Markdown')


@bot.message_handler(commands=['random_movie'])
def random_movie(message):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ª—É—á–∞–π–Ω–æ–π —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ —Ñ–∏–ª—å–º–∞"""
    # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –∂–∞–Ω—Ä
    genre = random.choice(list(MOVIES_DB.keys()))
    # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π —Ñ–∏–ª—å–º –∏–∑ —ç—Ç–æ–≥–æ –∂–∞–Ω—Ä–∞
    movie = random.choice(MOVIES_DB[genre])
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é —Å —ç–º–æ–¥–∑–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–π—Ç–∏–Ω–≥–∞
    if movie['rating'] >= 8.0:
        emoji = "üî•"
        recommendation = "–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –∫ –ø—Ä–æ—Å–º–æ—Ç—Ä—É!"
    elif movie['rating'] >= 7.0:
        emoji = "üëç"
        recommendation = "–û—Ç–ª–∏—á–Ω—ã–π –≤—ã–±–æ—Ä –¥–ª—è –≤–µ—á–µ—Ä–∞!"
    else:
        emoji = "üé¨"
        recommendation = "–ù–µ–ø–ª–æ—Ö–æ–π —Ñ–∏–ª—å–º –¥–ª—è —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—è"
    
    response = f"""
{emoji} *–°–ª—É—á–∞–π–Ω–∞—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è:*

üé¨ *{movie['title']}* ({movie['year']})
üé≠ –ñ–∞–Ω—Ä: {genre}
üë§ –†–µ–∂–∏—Å—Å—ë—Ä: {movie['director']}
‚≠ê –†–µ–π—Ç–∏–Ω–≥: {movie['rating']}/10

üí° {recommendation}
    """
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫—É –¥–ª—è –Ω–æ–≤–æ–π —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    markup = types.InlineKeyboardMarkup()
    btn = types.InlineKeyboardButton("üé≤ –ï—â—ë —Ñ–∏–ª—å–º", callback_data="random_movie")
    markup.add(btn)
    
    bot.send_message(message.chat.id, response, parse_mode='Markdown', reply_markup=markup)


@bot.message_handler(commands=['find_movie'])
def find_movie(message):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ñ–∏–ª—å–º–∞ –ø–æ –∂–∞–Ω—Ä—É —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤"""
    # –ü–∞—Ä—Å–∏–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥—ã
    args = message.text.split()[1:] if len(message.text.split()) > 1 else []
    
    if not args:
        # –ï—Å–ª–∏ –∂–∞–Ω—Ä –Ω–µ —É–∫–∞–∑–∞–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤—ã–±–æ—Ä–æ–º
        markup = types.InlineKeyboardMarkup()
        for genre in MOVIES_DB.keys():
            btn = types.InlineKeyboardButton(
                f"üé¨ {genre.capitalize()}", 
                callback_data=f"genre_{genre}"
            )
            markup.add(btn)
        
        bot.send_message(
            message.chat.id, 
            "–í—ã–±–µ—Ä–∏—Ç–µ –∂–∞–Ω—Ä —Ñ–∏–ª—å–º–∞:", 
            reply_markup=markup
        )
        return
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —É–∫–∞–∑–∞–Ω–Ω—ã–π –∂–∞–Ω—Ä
    genre = args[0].lower()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∂–∞–Ω—Ä–∞ –≤ –±–∞–∑–µ
    if genre not in MOVIES_DB:
        available = ", ".join(MOVIES_DB.keys())
        bot.send_message(
            message.chat.id,
            f"‚ùå –ñ–∞–Ω—Ä '{genre}' –Ω–µ –Ω–∞–π–¥–µ–Ω.\n\n"
            f"–î–æ—Å—Ç—É–ø–Ω—ã–µ –∂–∞–Ω—Ä—ã: {available}"
        )
        return
    
    # –í—ã–±–∏—Ä–∞–µ–º —Ñ–∏–ª—å–º—ã —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –∂–∞–Ω—Ä–∞
    movies = MOVIES_DB[genre]
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Ä–µ–π—Ç–∏–Ω–≥—É –∏ –±–µ—Ä–µ–º –ª—É—á—à–∏–µ
    top_movies = sorted(movies, key=lambda x: x['rating'], reverse=True)[:3]
    
    response = f"üé¨ *–õ—É—á—à–∏–µ —Ñ–∏–ª—å–º—ã –≤ –∂–∞–Ω—Ä–µ {genre}:*\n\n"
    
    for i, movie in enumerate(top_movies, 1):
        medal = "ü•á" if i == 1 else "ü•à" if i == 2 else "ü•â"
        response += f"{medal} *{movie['title']}*\n"
        response += f"   ‚≠ê –†–µ–π—Ç–∏–Ω–≥: {movie['rating']}/10\n"
        response += f"   üë§ –†–µ–∂–∏—Å—Å—ë—Ä: {movie['director']}\n\n"
    
    bot.send_message(message.chat.id, response, parse_mode='Markdown')


@bot.message_handler(commands=['top_rated'])
def top_rated(message):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–∫–∞–∑–∞ —Ç–æ–ø-5 —Ñ–∏–ª—å–º–æ–≤ –ø–æ —Ä–µ–π—Ç–∏–Ω–≥—É"""
    # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —Ñ–∏–ª—å–º—ã –≤ –æ–¥–∏–Ω —Å–ø–∏—Å–æ–∫
    all_movies = []
    for genre, movies in MOVIES_DB.items():
        for movie in movies:
            movie_with_genre = movie.copy()
            movie_with_genre['genre'] = genre
            all_movies.append(movie_with_genre)
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Ä–µ–π—Ç–∏–Ω–≥—É
    top_movies = sorted(all_movies, key=lambda x: x['rating'], reverse=True)[:5]
    
    response = "üèÜ *–¢–û–ü-5 —Ñ–∏–ª—å–º–æ–≤ 2023 –≥–æ–¥–∞:*\n\n"
    
    medals = ["ü•á", "ü•à", "ü•â", "4Ô∏è‚É£", "5Ô∏è‚É£"]
    
    for i, movie in enumerate(top_movies):
        response += f"{medals[i]} *{movie['title']}*\n"
        response += f"   ‚≠ê –†–µ–π—Ç–∏–Ω–≥: {movie['rating']}/10\n"
        response += f"   üé≠ –ñ–∞–Ω—Ä: {movie['genre']}\n"
        response += f"   üë§ –†–µ–∂–∏—Å—Å—ë—Ä: {movie['director']}\n\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    avg_rating = sum(m['rating'] for m in top_movies) / len(top_movies)
    response += f"üìä –°—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥ —Ç–æ–ø-5: {avg_rating:.1f}/10"
    
    bot.send_message(message.chat.id, response, parse_mode='Markdown')


@bot.message_handler(commands=['movie_quote'])
def movie_quote(message):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ª—É—á–∞–π–Ω–æ–π —Ü–∏—Ç–∞—Ç—ã –∏–∑ —Ñ–∏–ª—å–º–∞"""
    quote = random.choice(MOVIE_QUOTES)
    
    response = f"üí¨ *–¶–∏—Ç–∞—Ç–∞ –¥–Ω—è:*\n\n_{quote}_"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –Ω–æ–≤–æ–π —Ü–∏—Ç–∞—Ç—ã
    markup = types.InlineKeyboardMarkup()
    btn = types.InlineKeyboardButton("üí¨ –ï—â—ë —Ü–∏—Ç–∞—Ç–∞", callback_data="quote")
    markup.add(btn)
    
    bot.send_message(message.chat.id, response, parse_mode='Markdown', reply_markup=markup)


@bot.message_handler(commands=['movie_fact'])
def movie_fact(message):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–≥–æ —Ñ–∞–∫—Ç–∞ –æ –∫–∏–Ω–æ"""
    fact = random.choice(MOVIE_FACTS)
    
    response = f"üìö *–ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —Ñ–∞–∫—Ç:*\n\n{fact}"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –Ω–æ–≤–æ–≥–æ —Ñ–∞–∫—Ç–∞
    markup = types.InlineKeyboardMarkup()
    btn = types.InlineKeyboardButton("üìö –ï—â—ë —Ñ–∞–∫—Ç", callback_data="fact")
    markup.add(btn)
    
    bot.send_message(message.chat.id, response, parse_mode='Markdown', reply_markup=markup)


@bot.message_handler(commands=['quiz'])
def start_quiz(message):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã –æ —Ñ–∏–ª—å–º–∞—Ö"""
    user_id = message.from_user.id
    
    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –≤–æ–ø—Ä–æ—Å –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã
    questions = [
        {
            "question": "–ö–∞–∫–æ–π —Ñ–∏–ª—å–º –ø–æ–ª—É—á–∏–ª –û—Å–∫–∞—Ä –∑–∞ –ª—É—á—à–∏–π —Ñ–∏–ª—å–º –≤ 2024 –≥–æ–¥—É?",
            "options": ["–û–ø–ø–µ–Ω–≥–µ–π–º–µ—Ä", "–ë–∞—Ä–±–∏", "–£–±–∏–π—Ü—ã —Ü–≤–µ—Ç–æ—á–Ω–æ–π –ª—É–Ω—ã", "–ó–æ–Ω–∞ –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤"],
            "correct": 0
        },
        {
            "question": "–ö—Ç–æ —Ä–µ–∂–∏—Å—Å—ë—Ä —Ñ–∏–ª—å–º–∞ '–î—é–Ω–∞: –ß–∞—Å—Ç—å –≤—Ç–æ—Ä–∞—è'?",
            "options": ["–ö—Ä–∏—Å—Ç–æ—Ñ–µ—Ä –ù–æ–ª–∞–Ω", "–î–µ–Ω–∏ –í–∏–ª—å–Ω—ë–≤", "–ú–∞—Ä—Ç–∏–Ω –°–∫–æ—Ä—Å–µ–∑–µ", "–î–∂–µ–π–º—Å –ö—ç–º–µ—Ä–æ–Ω"],
            "correct": 1
        },
        {
            "question": "–ö–∞–∫–æ–π —Ñ–∏–ª—å–º —Å–æ–±—Ä–∞–ª –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ –≤ –ø—Ä–æ–∫–∞—Ç–µ –≤ 2023?",
            "options": ["–ë–∞—Ä–±–∏", "–û–ø–ø–µ–Ω–≥–µ–π–º–µ—Ä", "–°—Ç—Ä–∞–∂–∏ –ì–∞–ª–∞–∫—Ç–∏–∫–∏ 3", "–§–æ—Ä—Å–∞–∂ 10"],
            "correct": 0
        },
        {
            "question": "–°–∫–æ–ª—å–∫–æ —á–∞—Å—Ç–µ–π –≤ —Å–µ—Ä–∏–∏ —Ñ–∏–ª—å–º–æ–≤ –æ –î–∂–æ–Ω–µ –£–∏–∫–µ?",
            "options": ["3", "4", "5", "6"],
            "correct": 1
        },
        {
            "question": "–ö–∞–∫–æ–π –∞–∫—Ç—ë—Ä –∏–≥—Ä–∞–µ—Ç –≥–ª–∞–≤–Ω—É—é —Ä–æ–ª—å –≤ '–û–ø–ø–µ–Ω–≥–µ–π–º–µ—Ä–µ'?",
            "options": ["–†–æ–±–µ—Ä—Ç –î–∞—É–Ω–∏ –º–ª.", "–ö–∏–ª–ª–∏–∞–Ω –ú—ë—Ä—Ñ–∏", "–ú—ç—Ç—Ç –î–µ–π–º–æ–Ω", "–¢–æ–º –•–∞—Ä–¥–∏"],
            "correct": 1
        }
    ]
    
    # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –≤–æ–ø—Ä–æ—Å
    quiz = random.choice(questions)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_states[user_id] = {"quiz_answer": quiz["correct"]}
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ—Ç–≤–µ—Ç–æ–≤
    markup = types.InlineKeyboardMarkup(row_width=2)
    for i, option in enumerate(quiz["options"]):
        btn = types.InlineKeyboardButton(option, callback_data=f"quiz_{i}")
        markup.add(btn)
    
    response = f"üéÆ *–í–∏–∫—Ç–æ—Ä–∏–Ω–∞ –æ –∫–∏–Ω–æ*\n\n‚ùì {quiz['question']}"
    
    bot.send_message(message.chat.id, response, parse_mode='Markdown', reply_markup=markup)


@bot.callback_query_handler(func=lambda call: True)
def callback_handler(call):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö callback-–∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Ç –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–æ–∫"""
    user_id = call.from_user.id
    
    if call.data == "random_movie":
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π —Å–ª—É—á–∞–π–Ω—ã–π —Ñ–∏–ª—å–º
        genre = random.choice(list(MOVIES_DB.keys()))
        movie = random.choice(MOVIES_DB[genre])
        
        if movie['rating'] >= 8.0:
            emoji = "üî•"
            recommendation = "–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –∫ –ø—Ä–æ—Å–º–æ—Ç—Ä—É!"
        elif movie['rating'] >= 7.0:
            emoji = "üëç"
            recommendation = "–û—Ç–ª–∏—á–Ω—ã–π –≤—ã–±–æ—Ä –¥–ª—è –≤–µ—á–µ—Ä–∞!"
        else:
            emoji = "üé¨"
            recommendation = "–ù–µ–ø–ª–æ—Ö–æ–π —Ñ–∏–ª—å–º –¥–ª—è —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—è"
        
        response = f"""
{emoji} *–°–ª—É—á–∞–π–Ω–∞—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è:*

üé¨ *{movie['title']}* ({movie['year']})
üé≠ –ñ–∞–Ω—Ä: {genre}
üë§ –†–µ–∂–∏—Å—Å—ë—Ä: {movie['director']}
‚≠ê –†–µ–π—Ç–∏–Ω–≥: {movie['rating']}/10

üí° {recommendation}
        """
        
        markup = types.InlineKeyboardMarkup()
        btn = types.InlineKeyboardButton("üé≤ –ï—â—ë —Ñ–∏–ª—å–º", callback_data="random_movie")
        markup.add(btn)
        
        bot.edit_message_text(
            response, 
            call.message.chat.id, 
            call.message.message_id,
            parse_mode='Markdown',
            reply_markup=markup
        )
        
    elif call.data.startswith("genre_"):
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∂–∞–Ω—Ä–∞
        genre = call.data.replace("genre_", "")
        movies = MOVIES_DB[genre]
        top_movies = sorted(movies, key=lambda x: x['rating'], reverse=True)[:3]
        
        response = f"üé¨ *–õ—É—á—à–∏–µ —Ñ–∏–ª—å–º—ã –≤ –∂–∞–Ω—Ä–µ {genre}:*\n\n"
        
        for i, movie in enumerate(top_movies, 1):
            medal = "ü•á" if i == 1 else "ü•à" if i == 2 else "ü•â"
            response += f"{medal} *{movie['title']}*\n"
            response += f"   ‚≠ê –†–µ–π—Ç–∏–Ω–≥: {movie['rating']}/10\n"
            response += f"   üë§ –†–µ–∂–∏—Å—Å—ë—Ä: {movie['director']}\n\n"
        
        bot.edit_message_text(
            response,
            call.message.chat.id,
            call.message.message_id,
            parse_mode='Markdown'
        )
        
    elif call.data == "quote":
        # –ù–æ–≤–∞—è —Ü–∏—Ç–∞—Ç–∞
        quote = random.choice(MOVIE_QUOTES)
        response = f"üí¨ *–¶–∏—Ç–∞—Ç–∞ –¥–Ω—è:*\n\n_{quote}_"
        
        markup = types.InlineKeyboardMarkup()
        btn = types.InlineKeyboardButton("üí¨ –ï—â—ë —Ü–∏—Ç–∞—Ç–∞", callback_data="quote")
        markup.add(btn)
        
        bot.edit_message_text(
            response,
            call.message.chat.id,
            call.message.message_id,
            parse_mode='Markdown',
            reply_markup=markup
        )
        
    elif call.data == "fact":
        # –ù–æ–≤—ã–π —Ñ–∞–∫—Ç
        fact = random.choice(MOVIE_FACTS)
        response = f"üìö *–ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —Ñ–∞–∫—Ç:*\n\n{fact}"
        
        markup = types.InlineKeyboardMarkup()
        btn = types.InlineKeyboardButton("üìö –ï—â—ë —Ñ–∞–∫—Ç", callback_data="fact")
        markup.add(btn)
        
        bot.edit_message_text(
            response,
            call.message.chat.id,
            call.message.message_id,
            parse_mode='Markdown',
            reply_markup=markup
        )
        
    elif call.data.startswith("quiz_"):
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–∏–∫—Ç–æ—Ä–∏–Ω—É
        answer_index = int(call.data.replace("quiz_", ""))
        
        if user_id in user_states and "quiz_answer" in user_states[user_id]:
            correct_answer = user_states[user_id]["quiz_answer"]
            
            if answer_index == correct_answer:
                response = "‚úÖ *–ü—Ä–∞–≤–∏–ª—å–Ω–æ!* –û—Ç–ª–∏—á–Ω—ã–µ –∑–Ω–∞–Ω–∏—è –∫–∏–Ω–æ! üé¨"
            else:
                response = "‚ùå *–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ!* –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ —Å –Ω–æ–≤—ã–º –≤–æ–ø—Ä–æ—Å–æ–º üéÆ"
            
            # –£–±–∏—Ä–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            del user_states[user_id]
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –Ω–æ–≤–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
            markup = types.InlineKeyboardMarkup()
            btn = types.InlineKeyboardButton("üéÆ –ù–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å", callback_data="new_quiz")
            markup.add(btn)
            
            bot.edit_message_text(
                response,
                call.message.chat.id,
                call.message.message_id,
                parse_mode='Markdown',
                reply_markup=markup
            )
            
    elif call.data == "new_quiz":
        # –ù–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã
        questions = [
            {
                "question": "–í –∫–∞–∫–æ–º –≥–æ–¥—É –≤—ã—à–µ–ª –ø–µ—Ä–≤—ã–π —Ñ–∏–ª—å–º –æ –ì–∞—Ä—Ä–∏ –ü–æ—Ç—Ç–µ—Ä–µ?",
                "options": ["1999", "2000", "2001", "2002"],
                "correct": 2
            },
            {
                "question": "–ö–∞–∫–æ–π —Ñ–∏–ª—å–º –ø–µ—Ä–≤—ã–º –ø—Ä–µ–æ–¥–æ–ª–µ–ª –æ—Ç–º–µ—Ç–∫—É –≤ 1 –º–∏–ª–ª–∏–∞—Ä–¥ –¥–æ–ª–ª–∞—Ä–æ–≤?",
                "options": ["–¢–∏—Ç–∞–Ω–∏–∫", "–ê–≤–∞—Ç–∞—Ä", "–ó–≤—ë–∑–¥–Ω—ã–µ –≤–æ–π–Ω—ã", "–ü–∞—Ä–∫ –Æ—Ä—Å–∫–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞"],
                "correct": 0
            },
            {
                "question": "–°–∫–æ–ª—å–∫–æ —Ñ–∏–ª—å–º–æ–≤ –≤ –æ—Å–Ω–æ–≤–Ω–æ–π —Å–∞–≥–µ '–ó–≤—ë–∑–¥–Ω—ã—Ö –≤–æ–π–Ω'?",
                "options": ["6", "7", "8", "9"],
                "correct": 3
            }
        ]
        
        quiz = random.choice(questions)
        user_states[user_id] = {"quiz_answer": quiz["correct"]}
        
        markup = types.InlineKeyboardMarkup(row_width=2)
        for i, option in enumerate(quiz["options"]):
            btn = types.InlineKeyboardButton(option, callback_data=f"quiz_{i}")
            markup.add(btn)
        
        response = f"üéÆ *–í–∏–∫—Ç–æ—Ä–∏–Ω–∞ –æ –∫–∏–Ω–æ*\n\n‚ùì {quiz['question']}"
        
        bot.edit_message_text(
            response,
            call.message.chat.id,
            call.message.message_id,
            parse_mode='Markdown',
            reply_markup=markup
        )
    
    # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å "—á–∞—Å–∏–∫–∏"
    bot.answer_callback_query(call.id)


@bot.message_handler(func=lambda message: True)
def handle_text(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–∫–Ω–æ–ø–∫–∏ –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞)"""
    text = message.text
    
    if text == "üé≤ –°–ª—É—á–∞–π–Ω—ã–π —Ñ–∏–ª—å–º":
        random_movie(message)
    elif text == "‚≠ê –¢–æ–ø —Ñ–∏–ª—å–º–æ–≤":
        top_rated(message)
    elif text == "üí¨ –¶–∏—Ç–∞—Ç–∞":
        movie_quote(message)
    elif text == "üìö –§–∞–∫—Ç –æ –∫–∏–Ω–æ":
        movie_fact(message)
    else:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ - –ø–æ–∏—Å–∫ —Ñ–∏–ª—å–º–∞
        search_text = text.lower()
        found_movies = []
        
        # –ò—â–µ–º —Ñ–∏–ª—å–º—ã –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
        for genre, movies in MOVIES_DB.items():
            for movie in movies:
                if search_text in movie['title'].lower():
                    movie_with_genre = movie.copy()
                    movie_with_genre['genre'] = genre
                    found_movies.append(movie_with_genre)
        
        if found_movies:
            response = f"üîç *–ù–∞–π–¥–µ–Ω–æ —Ñ–∏–ª—å–º–æ–≤: {len(found_movies)}*\n\n"
            for movie in found_movies[:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–∞–∫—Å–∏–º—É–º 3
                response += f"üé¨ *{movie['title']}*\n"
                response += f"   üé≠ –ñ–∞–Ω—Ä: {movie['genre']}\n"
                response += f"   ‚≠ê –†–µ–π—Ç–∏–Ω–≥: {movie['rating']}/10\n\n"
        else:
            response = (
                "ü§î –ù–µ –º–æ–≥—É –Ω–∞–π—Ç–∏ —Ç–∞–∫–æ–π —Ñ–∏–ª—å–º.\n\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã:\n"
                "/random_movie - —Å–ª—É—á–∞–π–Ω—ã–π —Ñ–∏–ª—å–º\n"
                "/find_movie [–∂–∞–Ω—Ä] - –ø–æ–∏—Å–∫ –ø–æ –∂–∞–Ω—Ä—É\n"
                "/help - –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã"
            )
        
        bot.send_message(message.chat.id, response, parse_mode='Markdown')


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    print("üé¨ FilmsRew Bot –∑–∞–ø—É—â–µ–Ω!")
    print(f"üîó –ë–æ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω: https://t.me/FilmsRew_bot")
    print("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π...")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
    while True:
        try:
            bot.polling(none_stop=True, interval=0)
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
            print("üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥...")
            import time
            time.sleep(5)


if __name__ == '__main__':
    main()
